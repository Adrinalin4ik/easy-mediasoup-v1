'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _sdpTransform = require('sdp-transform');

var _sdpTransform2 = _interopRequireDefault(_sdpTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * RTCSessionDescription implementation.
 */
var RTCSessionDescription = function () {
    /**
     * RTCSessionDescription constructor.
     * @param {Object} [data]
     * @param {String} [data.type] - 'offer' / 'answer'.
     * @param {String} [data.sdp] - SDP string.
     * @param {Object} [data._sdpObject] - SDP object generated by the
     * sdp-transform library.
     */
    function RTCSessionDescription(data) {
        (0, _classCallCheck3.default)(this, RTCSessionDescription);

        // @type {String}
        this._sdp = null;

        // @type {Object}
        this._sdpObject = null;

        // @type {String}
        this._type = null;

        switch (data.type) {
            case 'offer':
                break;
            case 'answer':
                break;
            default:
                throw new TypeError('invalid type "' + data.type + '"');
        }

        this._type = data.type;

        if (typeof data.sdp === 'string') {
            this._sdp = data.sdp;
            try {
                this._sdpObject = _sdpTransform2.default.parse(data.sdp);
            } catch (error) {
                throw new Error('invalid sdp: ' + error);
            }
        } else if ((0, _typeof3.default)(data._sdpObject) === 'object') {
            this._sdpObject = data._sdpObject;
            try {
                this._sdp = _sdpTransform2.default.write(data._sdpObject);
            } catch (error) {
                throw new Error('invalid sdp object: ' + error);
            }
        } else {
            throw new TypeError('invalid sdp or _sdpObject');
        }
    }

    /**
     * Get sdp field.
     * @return {String}
     */


    (0, _createClass3.default)(RTCSessionDescription, [{
        key: 'toJSON',


        /**
         * Returns an object with type and sdp fields.
         * @return {Object}
         */
        value: function toJSON() {
            return {
                sdp: this._sdp,
                type: this._type
            };
        }
    }, {
        key: 'sdp',
        get: function get() {
            return this._sdp;
        }

        /**
         * Set sdp field.
         * NOTE: This is not allowed per spec, but lib-jitsi-meet uses it.
         * @param {String} sdp
         */
        ,
        set: function set(sdp) {
            try {
                this._sdpObject = _sdpTransform2.default.parse(sdp);
            } catch (error) {
                throw new Error('invalid sdp: ' + error);
            }

            this._sdp = sdp;
        }

        /**
         * Gets the internal sdp object.
         * @return {Object}
         * @private
         */

    }, {
        key: 'sdpObject',
        get: function get() {
            return this._sdpObject;
        }

        /**
         * Get type field.
         * @return {String}
         */

    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }]);
    return RTCSessionDescription;
}();

exports.default = RTCSessionDescription;